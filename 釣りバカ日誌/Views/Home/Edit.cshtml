@model EditViewModel
@{
    ViewData["Title"] = "編集";
}
@section Styles{
    <style>

        html, body, div, span, applet, object, iframe,
        h1, h2, h3, h4, h5, h6, p, blockquote, pre,
        a, abbr, acronym, address, big, cite, code,
        del, dfn, em, img, ins, kbd, q, s, samp,
        small, strike, strong, sub, sup, tt, var,
        b, u, i, center,
        dl, dt, dd, ol, ul, li,
        fieldset, form, label, legend,
        table, caption, tbody, tfoot, thead, tr, th, td,
        article, aside, canvas, details, embed,
        figure, figcaption, footer, header, hgroup,
        menu, nav, output, ruby, section, summary,
        time, mark, audio, video {
            padding: 0;
            border: 0;
            font: inherit;
            font-size: 100%;
            vertical-align: baseline;
        }

        html {
            line-height: 1;
        }

        ol, ul {
            list-style: none;
        }

        table {
            border-collapse: collapse;
            border-spacing: 0;
        }

        caption, th, td {
            text-align: left;
            font-weight: normal;
            vertical-align: middle;
        }

        q, blockquote {
            quotes: none;
        
        }

        q:before, q:after, blockquote:before, blockquote:after {
            content: "";
            content: none;
        }

        a img {
            border: none;
        }

        article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary {
            display: block;
        }

        /* Colors */
/* ---------------------------------------- */
        * {
            -moz-box-sizing: border-box;
            -webkit-box-sizing: border-box;
            box-sizing: border-box;
        }

        a {
            text-decoration: none;
        }

        .info-text {
            text-align: left;
            width: 100%;
        }

        .form-group {
            margin-bottom: 20px;
        }

        h2.heading {
            font-size: 18px;
            text-transform: uppercase;
            font-weight: 300;
            text-align: left;
            color: #506982;
            border-bottom: 1px solid #506982;
            padding-bottom: 3px;
            margin-bottom: 20px;
        }

        .controls {
            text-align: left;
            position: relative;
        }

        .controls input[type="text"],
        .controls input[type="number"],
        .controls input[type="date"],
        .controls input[type="tel"],
        .controls textarea,
        .controls button,
        .controls select {
            padding: 12px;
            font-size: 14px;
            border: 1px solid #c6c6c6;
            width: 100%;
            margin-bottom: 18px;
            color: #888;
            font-family: 'Lato', 'sans-serif';
            font-size: 16px;
            font-weight: 300;
            -moz-border-radius: 2px;
            -webkit-border-radius: 2px;
            border-radius: 2px;
            -moz-transition: all 0.3s;
            -o-transition: all 0.3s;
            -webkit-transition: all 0.3s;
            transition: all 0.3s;
        }

        .controls input[type="text"]:focus, .controls input[type="text"]:hover,
        .controls input[type="number"]:focus,
        .controls input[type="number"]:hover,
        .controls input[type="date"]:focus,
        .controls input[type="date"]:hover,
        .controls input[type="tel"]:focus,
        .controls input[type="tel"]:hover,
        .controls textarea:focus,
        .controls textarea:hover,
        .controls button:focus,
        .controls button:hover,
        .controls select:focus,
        .controls select:hover {
            outline: none;
            border-color: #9FB1C1;
        }

        .controls input[type="text"]:focus + label, .controls input[type="text"]:hover + label,
        .controls input[type="number"]:focus + label,
        .controls input[type="number"]:hover + label,
        .controls input[type="date"]:focus + label,
        .controls input[type="date"]:hover + label,
        .controls input[type="tel"]:focus + label,
        .controls input[type="tel"]:hover + label,
        .controls textarea:focus + label,
        .controls textarea:hover + label,
        .controls button:focus + label,
        .controls button:hover + label,
        .controls select:focus + label,
        .controls select:hover + label {
            color: #bdcc00;
            cursor: text;
        }

        .controls .fa-sort {
            position: absolute;
            right: 10px;
            top: 17px;
            color: #999;
        }

        .controls select {
            -moz-appearance: none;
            -webkit-appearance: none;
            cursor: pointer;
        }

        .controls label {
            position: absolute;
            left: 8px;
            top: 12px;
            width: 60%;
            color: #999;
            font-size: 16px;
            display: inline-block;
            padding: 4px 10px;
            font-weight: 400;
            background-color: rgba(255, 255, 255, 0);
            -moz-transition: color 0.3s, top 0.3s, background-color 0.8s;
            -o-transition: color 0.3s, top 0.3s, background-color 0.8s;
            -webkit-transition: color 0.3s, top 0.3s, background-color 0.8s;
            transition: color 0.3s, top 0.3s, background-color 0.8s;
            background-color: white;
        }

        .controls label.active {
            top: -11px;
            color: #555;
            background-color: white;
            width: auto;
        }

        .controls textarea {
            resize: none;
            height: 200px;
        }

        button {
            cursor: pointer;
            background-color: #1b3d4d;
            border: none;
            color: #fff;
            padding: 12px 0;
            float: right;
        }

        button:hover {
            background-color: #224c60;
        }

        .clear:after {
            content: "";
            display: table;
            clear: both;
        }

        .grid {
            background: white;
        }

        .grid:after {
            content: "";
            display: table;
            clear: both;
        }

        [class*='col-'] {
            float: left;
            padding-right: 10px;
        }

        .grid [class*='col-']:last-of-type {
            padding-right: 0;
        }

        .col-2-3 {
            width: 66.66%;
        }

        .col-1-3 {
            width: 33.33%;
        }

        .col-1-2 {
            width: 50%;
        }

        .col-1-4 {
            width: 25%;
        }

        [class*='col-'] {
            padding-right: 0px;
        }

        .col-1-8 {
            width: 12.5%;
        }

        a.btn {
            position: relative;
            color: #fff;
            font-weight: bold;
            background: #000;
            padding: 4px 17px 4px 34px;
            border-radius: 100px;
            margin-bottom: 5px;
            font-size:12px;
        }

        a.btn::before, a.btn::after {
            position: absolute;
            top: 50%;
            left: 12px;
            content: '';
            width: 16px;
            height: 3px;
            background: #fff;
            margin: auto;
        }

        a.btn::before {
            -webkit-transform: translateY(-50%) rotate(45deg);
            transform: translateY(-50%) rotate(45deg);
        }

        a.btn::after {
            -webkit-transform: translateY(-50%) rotate(-45deg);
            transform: translateY(-50%) rotate(-45deg);
        }

        .slider { /*横幅94%で左右に余白を持たせて中央寄せ*/
            width: 94%;
            margin: 0 auto;
        }

        .slider img {
            width: 100%; /*スライダー内の画像を横幅100%に*/
            height: auto;
        }

        /*slickのJSで書かれるタグ内、スライド左右の余白調整*/

        .slider .slick-slide {
            margin: 0 10px;
        }

        /*矢印の設定*/

        /*戻る、次へ矢印の位置*/
        .slick-prev,
        .slick-next {
            position: absolute; /*絶対配置にする*/
            top: 42%;
            cursor: pointer; /*マウスカーソルを指マークに*/
            outline: none; /*クリックをしたら出てくる枠線を消す*/
            border-top: 2px solid #666; /*矢印の色*/
            border-right: 2px solid #666; /*矢印の色*/
            height: 15px;
            width: 15px;
        }

        .slick-prev { /*戻る矢印の位置と形状*/
            left: -1.5%;
            transform: rotate(-135deg);
        }

        .slick-next { /*次へ矢印の位置と形状*/
            right: -1.5%;
            transform: rotate(45deg);
        }

        /*ドットナビゲーションの設定*/

        .slick-dots {
            text-align: center;
            margin: 20px 0 0 0;
        }

        .slick-dots li {
            display: inline-block;
            margin: 0 5px;
        }

        .slick-dots button {
            color: transparent;
            outline: none;
            width: 24px; /*ドットボタンのサイズ*/
            height: 8px; /*ドットボタンのサイズ*/
            display: block;
            border-radius: 50%;
            background: #ccc; /*ドットボタンの色*/
        }

        .slick-dots .slick-active button {
            background: #333; /*ドットボタンの現在地表示の色*/
        }


    </style>
}
@section Scripts{
    <script src='https://www.gstatic.com/firebasejs/7.5.0/firebase-app.js'></script>
    <script src='https://www.gstatic.com/firebasejs/7.5.0/firebase-storage.js'></script>
    <script src="https://fastly.jsdelivr.net/npm/echarts@5.4.3/dist/echarts.min.js"></script>
    <script>
        (function ($) {
                function floatLabel(inputType) {
                    $(inputType).each(function () {
                        var $this = $(this);
                        // on focus add cladd active to label
                        $this.focus(function () {
                            $this.next().addClass("active");
                        });
                        //on blur check field and remove class if needed
                        $this.blur(function () {
                            if ($this.val() === '' || $this.val() === 'blank') {
                                $this.next().removeClass();
                            }
                        });
                    });
                }
                // just add a class of "floatLabel to the input field!"
                floatLabel(".floatLabel");

            })(jQuery);

        // スライド初期化
        function sliderInit(){
            $('.slider').slick({
                infinite: true,//スライドをループさせるかどうか。初期値はtrue。
                slidesToShow: 3,//スライドを画面に3枚見せる
                slidesToScroll: 3,//1回のスクロールで3枚の写真を移動して見せる
                prevArrow: '<div class="slick-prev"></div>',//矢印部分PreviewのHTMLを変更
                nextArrow: '<div class="slick-next"></div>',//矢印部分NextのHTMLを変更
                dots: true,//下部ドットナビゲーションの表示
                responsive: [
                    {
                        breakpoint: 769,//モニターの横幅が769px以下の見せ方
                        settings: {
                            slidesToShow: 2,//スライドを画面に2枚見せる
                            slidesToScroll: 2,//1回のスクロールで2枚の写真を移動して見せる
                        }
                    },
                    {
                        breakpoint: 426,//モニターの横幅が426px以下の見せ方
                        settings: {
                            slidesToShow: 1,//スライドを画面に1枚見せる
                            slidesToScroll: 1,//1回のスクロールで1枚の写真を移動して見せる
                        }
                    }
                ]
            });
        }

        // 編集ID
        let editId = "@Model.id";

        // 写真更新(0:なし, 1:あり)
        let isUpdPhoto = 0;

        // Google Drive フォルダID
        let folderid = "";

        // 写真ファイル
        let imgs = [];

        // 同伴者入力イベント
        window.document.onkeydown = function (e) {
            if (e.key === 'Enter') {
                let companion = document.getElementById('companion');

                // 同伴者入力時のEnterイベント
                if(companion === document.activeElement){

                    if (e.isComposing || e.key === 'Process' || e.keyCode === 229) {
                        return;

                    } else {
                        
                        if(!!companion.value){

                            setCompanion(companion.value);
                            companion.value = "";
                        }
                    }
                }
            }
        }

        window.addEventListener('load', (e) => {

            let select = document.getElementById('prefecturecode');
            let municipalities = document.getElementById('municipalities');
            let municipalitiescode = document.getElementById('municipalitiescode');
            let portcode = document.getElementById('portcode');
            let fishingdate = document.getElementById('fishingdate');

            sliderInit();

            const date = new Date();
            const year = date.getFullYear();
            const month = ('0' + (date.getMonth() + 1)).slice(-2);
            const day = ('0' + date.getDate()).slice(-2);

            fishingdate.value = year + "-" + month + "-" + day;

            // 都道府県選択イベント
            select.addEventListener(`change`, async function () {

                if(!select.value){
                    // option削除
                    while (municipalities.lastChild) {
                        municipalities.removeChild(municipalities.lastChild);
                    }

                    while (portcode.lastChild) {
                        portcode.removeChild(portcode.lastChild);
                    }

                    return;
                }

                municipalitiescode.value = "";
                portcode.value = "";

                let request = { prefecturecode : select.value};

                const data = await asyncForm(`@Url.Action("GetMunicipalities")`, request)
                        .then(response => response.json())
                        .then(data => data);

                if(!data){
                    return;
                }

                // option削除
                while (municipalities.lastChild) {
                    municipalities.removeChild(municipalities.lastChild);
                }

                let option1 = document.createElement('option');
                option1.value = "";
                municipalities.appendChild(option1);

                for (let i = 0; i < data.municipalities.data.length; i++) {
                    option1 = document.createElement('option');
                    option1.textContent = data.municipalities.data[i].name;
                    municipalities.appendChild(option1);
                }

                // option削除
                while (portcode.lastChild) {
                    portcode.removeChild(portcode.lastChild);
                }

                option1 = document.createElement('option');
                option1.value = "";
                portcode.appendChild(option1);

                for (let i = 0; i < data.tides.length; i++) {
                    option1 = document.createElement('option');
                    option1.value = data.tides[i].locationcode;
                    option1.textContent = data.tides[i].locationname;
                    portcode.appendChild(option1);
                }
            });

            // 更新時
            if("@Model.upd" == 1){

                GetEditData();
            }

            document.getElementById('fishingdate').focus();
        })

        // Editデータ取得処理
        async function GetEditData(){

            let request = { id: "@Model.id" };

            const data = await asyncForm(`@Url.Action("GetEditData")`, request)
                .then(response => response.json())
                .then(data => data);

            if (!data) {
                return;
            }

            setEditData(data.dairy);

        }

        // Editデータセット
        async function setEditData(data){

            // 日付
            if(data.fishingdate > 9999999){

                let year = Math.floor(data.fishingdate / 10000);
                let month = Math.floor((data.fishingdate - (year * 10000)) / 100);
                let day = data.fishingdate % 100;

                document.getElementById('fishingdate').value = year.toString() + "-" + month.toString().padStart(2, '0') + "-" + day.toString().padStart(2, '0');
            }

            // タイトル
            document.getElementById('title').value = data.title;
            document.getElementById('title').focus();

            // 都道府県
            document.getElementById('prefecturecode').selectedIndex = data.prefecturecode;
            document.getElementById('prefecturecode').focus();

            // 市町村
            document.getElementById('municipalitiescode').value = data.municipalities;
            document.getElementById('municipalitiescode').focus();

            // 番地
            document.getElementById('addressnumber').value = data.addressnumber;
            document.getElementById('addressnumber').focus();

            // 同伴者
            if (!!data.companion1) {
                setCompanion(data.companion1);
            }

            if (!!data.companion2) {
                setCompanion(data.companion2);
            }

            if (!!data.companion3) {
                setCompanion(data.companion3);
            }

            if (!!data.companion4) {
                setCompanion(data.companion4);
            }

            if (!!data.companion5) {
                setCompanion(data.companion5);
            }

            // 港　地点
            if (!!data.locationcode){

                let portcode = document.getElementById('portcode');

                let request = { prefecturecode: data.prefecturecode };

                const data1 = await asyncForm(`@Url.Action("GetMunicipalities")`, request)
                    .then(response => response.json())
                    .then(data => data);

                if (!data1) {
                    return;
                }

                // option削除
                while (portcode.lastChild) {
                    portcode.removeChild(portcode.lastChild);
                }

                option1 = document.createElement('option');
                option1.value = "";
                portcode.appendChild(option1);

                for (let i = 0; i < data1.tides.length; i++) {
                    option1 = document.createElement('option');
                    option1.value = data1.tides[i].locationcode;
                    option1.textContent = data1.tides[i].locationname;
                    portcode.appendChild(option1);
                }

                portcode.value = data.locationcode;
                portcode.focus();
            }

            // 釣果
            document.getElementById('fishingresults').value = data.fishingresults;
            document.getElementById('fishingresults').focus();

            // 備考
            document.getElementById('remarks').value = data.remarks;
            document.getElementById('remarks').focus();

            // 画像
            let preview = document.getElementById('preview');

            deletePhotos();
            for (let i = 0; i < data.photoid.length; i++) {

                let li = document.createElement('li');
                let img = document.createElement('img');

                img.src = `https://lh3.googleusercontent.com/d/${data.photoid[i]}`;
                img.name = "firebasePhoto";
                li.appendChild(img);
                preview.prepend(li);
                preview.style.display = "";
                $('.slider').slick('unslick');
                sliderInit();
            }

            folderid = data.folderid;
        }

        // 同伴者ボタンセット
        function setCompanion(data) {
            const companionName = document.getElementById("companionName");

            if (companionName.childElementCount < 5) {

                const a = document.createElement("a");

                a.id = `btn${companionName.childElementCount + 1}`;

                a.classList.add("btn");

                a.textContent = data;

                a.onclick = function (ele) {
                    ele.currentTarget.remove();

                    let childElems = companionName.children;

                    for (let i = 0; i < childElems.length; i++) {
                        childElems[i].id = `btn${i + 1}`;
                    }
                };

                companionName.appendChild(a);
            }
        }

        // 潮汐データ取得処理
        async function GetTideData(){

            let fishingdate = document.getElementById('fishingdate');
            let portcode = document.getElementById('portcode');
            let dom = document.getElementById('chart-container');

            let date = new Date(fishingdate.value);

            let request = 
                { 
                    year: date.getFullYear(),
                    month: date.getMonth() + 1,
                    day: date.getDate(),
                    locationcode: portcode.value,
                };

            const data = await asyncForm(`@Url.Action("GetTideData")`, request)
                .then(response => response.json())
                .then(data => data);

            if (!data) {
                dom.style.display = "none";
                return;
            }

            if(data.timedatas.length == 0){
                dom.style.display = "none";
                return;
            };

            let xData =[];
            let yData =[];

            for (let i = 0; i < data.timedatas.length; i++){

                xData.push(data.timedatas[i].hour + "時");
                yData.push(data.timedatas[i].high);
            }

            dom.style.display = "";

            let myChart = echarts.init(dom, null, {
                renderer: 'canvas',
                useDirtyRect: false
            });

            let option;

            option = {
                color: ['#37A2FF'],
                title: {
                    text: '潮汐表'
                },
                // カーソルを重ねた際の情報
                tooltip: {
                    trigger: 'axis',
                    axisPointer: {
                        type: 'cross',
                        label: {
                            backgroundColor: '#6a7985'
                        }
                    }
                },
                // 凡例
                legend: {
                    data: ['潮位']
                },
                // ツールボックス
                toolbox: {
                    //feature: {
                    //    saveAsImage: {}
                    //}
                    show: true,
                    x: 300,
                    feature: {
                        dataView: {
                            show: true,
                            title: 'データの表示',
                            readOnly: false,
                            lang: ['データの表示', '閉じる', '更新']
                        },
                        magicType: {
                            show: true,
                            title: {  // デフォルトだと中国語なので日本語を設定
                                line: '折れ線グラフ',
                                bar: '棒グラフ'
                            },
                            type: ['bar', 'line'],
                        },
                        restore: { show: true, title: '更新' },
                        saveAsImage: { show: true, title: '画像保存' }
                    }
                },
                grid: {
                    left: '3%',
                    right: '4%',
                    bottom: '3%',
                    containLabel: true
                },
                // データx軸
                xAxis: [
                    {
                        type: 'category',
                        boundaryGap: false,
                        data: xData,
                    }
                ],
                // データy軸
                yAxis: [
                    {
                        type: 'value'
                    }
                ],
                series: [
                    {
                        name: '潮汐',
                        type: 'line',
                        stack: 'Total',
                        smooth: true,
                        lineStyle: {
                            width: 0
                        },
                        showSymbol: false,
                        areaStyle: {
                            opacity: 0.8,
                            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                                {
                                    offset: 0,
                                    color: 'rgb(128, 255, 165)'
                                },
                                {
                                    offset: 1,
                                    color: 'rgb(1, 191, 236)'
                                }
                            ])
                        },
                        emphasis: {
                            focus: 'series'
                        },
                        markLine: {
                            data: [
                                { type: 'average', name: '平均值' }
                            ]
                        },
                        markPoint: {
                            data: [
                                { type: 'max', name: '満潮' },
                                { type: 'min', name: '干潮' }
                            ]
                        },
                        data: yData
                    },
                ]
            };

            if (option && typeof option === 'object') {
                myChart.setOption(option);
            }

            window.addEventListener('resize', myChart.resize);
        }

        // 写真読み込み処理
        document.getElementById('InputFiles').addEventListener('change', function (e) {

            // 更新あり
            isUpdPhoto = 1;

            deletePhotos();
            let files = e.target.files;

            let preview = document.getElementById('preview');
            
            for (let i = 0; i < files.length; i++) {

                
                let reader = new FileReader();
                let li;
                let img;

                reader.onload = function (e) {
                    $('.slider').slick('unslick');
                    img = document.createElement('img');
                    img.name = "firebasePhoto";
                    img.setAttribute('src', e.target.result);
                    li = document.createElement('li');
                    li.appendChild(img);
                    preview.prepend(li);
                    preview.style.display = "";
                    sliderInit();
                }
                reader.readAsDataURL(files[i]);
                
            }
        });

        ////firebase初期化
        //let firebaseConfig = {
        //    apiKey: 'AIzaSyDXhTaPFnwJa9Ij-tB_X87hMbG0qBvFnVY',
        //    projectId: 'fishing-diary-d2905',
        //    storageBucket: 'fishing-diary-d2905.appspot.com',
        //}
        //firebase.initializeApp(firebaseConfig);

        //// アップロード
        //async function uploadImg(){

        //    let fileNames = [];
        //    if (imgs.length == 0) {
        //        return fileNames;
        //    }

        //    let uploads = [];
        //    $('.slider').slick('unslick');
        //    let date = new Date(document.getElementById('fishingdate').value);
        //    let fileName = [date.getFullYear(), 
        //                    ('0' + (date.getMonth() + 1)).slice(-2), 
        //                    ('0' + date.getDate()).slice(-2),
        //                    date.getHours(),
        //                    date.getMinutes()
        //                    ].join('');

        //    for(let i = 0; i < imgs.length; i++){
                
        //        let storageRef = firebase.storage().ref('fish/' + fileName + "_" + i);
        //        uploads.push(storageRef.put(imgs[i]));
        //        fileNames.push(fileName + "_" + i);
        //    }
        //    sliderInit();

        //    //すべての画像のアップロード完了を待つ
        //    await Promise.all(uploads).then(function () {
        //        console.log('アップロード完了');
        //        return fileNames;
        //    });

        //    return fileNames;
        //}

        //// ダウンロード
        //function downloadImg(fileNames){

        //    let storageRef = firebase.storage().ref();

        //    let preview = document.getElementById('preview');

        //    deletePhotos();
        //    for(let i = 0; i < fileNames.length; i++){

        //        let downloadFileRef = storageRef.child(`fish/${fileNames[i]}`);

        //        downloadFileRef.getDownloadURL().then(function(url) {

        //            let li = document.createElement('li');
        //            let img = document.createElement('img');

        //            img.src = url;
        //            img.name = "firebasePhoto";
        //            li.appendChild(img);
        //            preview.prepend(li);
        //            preview.style.display = "";
        //            $('.slider').slick('unslick');
        //            sliderInit();
        //        }).catch((error) => {
        //            console.log("ダウンロードエラー");
        //        });
        //    }
        //}

        // 写真クリア処理
        function deletePhotos(){

            $('.slider').slick('unslick');
            let preview = document.getElementById('preview');

            while(preview.firstChild){
                preview.removeChild(preview.firstChild);
            }
            sliderInit();
        }

        // Submit押下時
        async function clickSubmit(){

            loadStart();

            if (!document.getElementById('fishingdate').value){
                return;
            }

            let date = new Date(document.getElementById('fishingdate').value);
            let dateString = [date.getFullYear(),
                            ('0' + (date.getMonth() + 1)).slice(-2),
                            ('0' + date.getDate()).slice(-2)
                            ].join('');

            let detail = { 
                id: "@Model.id",
                title: document.getElementById('title').value,
                fishingdate: Number(dateString),
                prefecturecode: document.getElementById('prefecturecode').value,
                prefecture: document.getElementById('prefecturecode').options[document.getElementById('prefecturecode').selectedIndex].innerText,
                municipalities: document.getElementById('municipalitiescode').value,
                addressnumber: document.getElementById('addressnumber').value,
                locationcode: document.getElementById('portcode').value,
                fishingresults: document.getElementById('fishingresults').value,
                remarks: document.getElementById('remarks').value,
                folderid: folderid,
            };

            let companions = document.getElementById("companionName").getElementsByTagName('a');
            for(let i = 0; i < companions.length; i++){

                detail[`companion${i + 1}`] = companions[i].textContent;
            }

            //// アップロード
            //if("@Model.upd" == 0){
            //    let photos = await uploadImg();

            //    for (let i = 0; i < photos.length; i++) {

            //        detail[`photo${i + 1}`] = photos[i];
            //    }
            //}
            
            let request = { 
                dairy: detail,
                upd: "@Model.upd",
                photoupd: isUpdPhoto
            };

            const data = await asyncForm(`@Url.Action("Update")`, request)
                .then(response => response.json())
                .then(data => data);

            if (!data) {
                return;
            }

            loadEnd();

            location.href = '@Url.Action("Index", "Home")';
        }

    </script>
}

<div class="form-group">
    <h2 class="heading">Details</h2>
    <div class="grid">
        <div class="col-1-4 col-1-4-sm">
            <div class="controls">
                <input type="date" id="fishingdate" class="floatLabel" name="fishingdate" value="">
                <label for="fishingdate" class="label-date">&nbsp;&nbsp;日付</label>
            </div>
        </div>
    </div>
    <div class="controls">
        <input type="text" id="title" class="floatLabel" name="title" maxlength="70" autocomplete="off">
        <label for="title">タイトル</label>
    </div>
    <div class="grid">
        <div class="col-1-3 col-1-3-sm">
            <div class="controls">
                <select id="prefecturecode" class="floatLabel">
                    <option value=""></option>
                    <optgroup label="北海道地方">
                        <option value="01">北海道</option>
                    </optgroup>
                    <optgroup label="東北地方">
                        <option value="02">青森県</option>
                        <option value="03">岩手県</option>
                        <option value="04">宮城県</option>
                        <option value="05">秋田県</option>
                        <option value="06">山形県</option>
                        <option value="07">福島県</option>
                    </optgroup>
                    <optgroup label="関東地方">
                        <option value="08">茨城県</option>
                        <option value="09">栃木県</option>
                        <option value="10">群馬県</option>
                        <option value="11">埼玉県</option>
                        <option value="12">千葉県</option>
                        <option value="13">東京都</option>
                        <option value="14">神奈川県</option>
                    </optgroup>
                    <optgroup label="中部地方">
                        <option value="15">新潟県</option>
                        <option value="16">富山県</option>
                        <option value="17">石川県</option>
                        <option value="18">福井県</option>
                        <option value="19">山梨県</option>
                        <option value="20">長野県</option>
                        <option value="21">岐阜県</option>
                        <option value="22">静岡県</option>
                        <option value="23">愛知県</option>
                    </optgroup>
                    <optgroup label="関西地方">
                        <option value="24">三重県</option>
                        <option value="25">滋賀県</option>
                        <option value="26">京都府</option>
                        <option value="27">大阪府</option>
                        <option value="28">兵庫県</option>
                        <option value="29">奈良県</option>
                        <option value="30">和歌山県</option>
                    </optgroup>
                    <optgroup label="中国地方">
                        <option value="31">鳥取県</option>
                        <option value="32">島根県</option>
                        <option value="33">岡山県</option>
                        <option value="34">広島県</option>
                        <option value="35">山口県</option>
                    </optgroup>
                    <optgroup label="四国地方">
                        <option value="36">徳島県</option>
                        <option value="37">香川県</option>
                        <option value="38">愛媛県</option>
                        <option value="39">高知県</option>
                    </optgroup>
                    <optgroup label="九州地方・沖縄地方">
                        <option value="40">福岡県</option>
                        <option value="41">佐賀県</option>
                        <option value="42">長崎県</option>
                        <option value="43">熊本県</option>
                        <option value="44">大分県</option>
                        <option value="45">長崎県</option>
                        <option value="46">鹿児島県</option>
                        <option value="47">沖縄県</option>
                    </optgroup>
                </select>
                <label for="prefecturecode">&nbsp;&nbsp;都道府県</label>
            </div>
        </div>
        <div class="col-1-3 col-1-3-sm">
            <div class="controls">
                <input type="text" id="municipalitiescode" class="floatLabel" name="municipalitiescode" style="height:42px" maxlength="15" list="municipalities" autocomplete="off">
                <label for="municipalitiescod" style="width: 70px">市町村</label>
                <datalist id="municipalities" class="floatLabel">
                    <option value=""></option>
                </datalist>
            </div>
        </div>
        <div class="col-1-3 col-1-3-sm">
            <div class="controls">
                <input type="text" id="addressnumber" class="floatLabel" name="addressnumber" style="height:42px" maxlength="20" autocomplete="off">
                <label for="addressnumber">番地(その他)</label>
            </div>
        </div>
    </div>
    <div class="grid">
        <div id="companionName" style="border-bottom:1px dotted; margin-bottom:5px;" readonly>
        </div>
        <div class="col-1-3">
            <div class="controls">
                <input type="text" id="companion" class="floatLabel" name="companion" maxlength="15" autocomplete="off">
                <label for="companion">同伴者</label>
            </div>
        </div>
    </div>
    <div class="grid">
        <div class="col-1-4 col-1-3-sm">
            <div class="controls">
                <select id="portcode" class="floatLabel">
                    <option value=""></option>
                </select>
                <label for="portcode">港 地点</label>
            </div>
        </div>
        <div class="col-2-3 col-1-3-sm">
            <button type="submit" value="" class="col-1-4" style="height:42px" onclick="GetTideData()">潮汐表</button>
        </div>
    </div>
    <div class="grid">
        <div id="chart-container" style="height:400px; display:none;"></div>
    </div>
    <div class="grid">
        <div class="controls">
            <textarea name="fishingresults" class="floatLabel" id="fishingresults" maxlength="780"></textarea>
            <label for="fishingresults">釣果</label>
        </div>
        <div class="controls">
            <input type="text" id="remarks" class="floatLabel" name="remarks" maxlength="70">
            <label for="remarks">備考</label>
        </div>
    </div>
    <div class="grid" style="padding-bottom:10px; text-align:right">
        <div style='text-align: end;'>
            <label for='InputFiles'>
                <img style="padding-top:7px; padding-left:10px" src="/photo/icons8-フォルダーを開く-50.png" />
                <input id="InputFiles" type="file" webkitdirectory style='display:none;'>
            </label>
        </div>
    </div>
    <div class="grid">
        <ul id="preview" class="slider" style="display:none">
        </ul>
    </div>
    <div class="grid">
        <button type="submit" value="" class="col-1-4" onclick="clickSubmit()">Submit</button>
    </div>
</div>
